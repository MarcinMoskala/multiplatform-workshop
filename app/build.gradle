apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

repositories {
    google()
    jcenter()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "https://dl.bintray.com/soywiz/soywiz" }
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId 'org.jetbrains.kotlin.mpp_app_android'
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    packagingOptions {
        pickFirst("META-INF/*.kotlin_module")
    }
}

def ktor_version = "1.3.0"
def serialization_version = "0.14.0"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "io.ktor:ktor-client-android:$ktor_version"
    implementation "io.ktor:ktor-client-gson:$ktor_version"

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

androidExtensions {
    experimental = true
}

kotlin {
    android("android")
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework {
                freeCompilerArgs += "-Xobjc-generics"
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                // TODO
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "io.mockk:mockk-common:1.9"
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation 'com.android.support:support-v4:28.0.0'
                implementation 'com.android.support:appcompat-v7:28.0.0'
                implementation 'com.android.support:design:28.0.0'
                implementation 'com.android.support.constraint:constraint-layout:1.1.3'
                implementation("io.ktor:ktor-client-json-jvm:$ktor_version")
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation 'junit:junit:4.12'
                implementation "io.mockk:mockk:1.9"
            }
        }
        iosMain {
            dependencies {
                // TODO
            }
        }

        iosArm64Main.dependencies {
            // TODO
        }

        iosX64Main.dependencies {
            // TODO
        }

        iosTest {
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}